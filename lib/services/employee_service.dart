import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/employee.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:shared_preferences/shared_preferences.dart';

class EmployeeService {
  final String baseUrl = '${dotenv.env['BASE_URL']}/nhan-vien';

  // ============================================================
  // üîπ L·∫•y token t·ª´ SharedPreferences
  Future<String?> _getToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('token');
  }

  // ============================================================
  // üîπ H√†m build headers ƒë·ªông (lu√¥n k√®m token n·∫øu c√≥)
  Future<Map<String, String>> _getHeaders() async {
    final token = await _getToken();
    final headers = {'Content-Type': 'application/json'};

    if (token != null && token.isNotEmpty) {
      headers['Authorization'] = 'Bearer $token';
    }

    return headers;
  }

  // ============================================================
  // üîπ GET ALL EMPLOYEES
  Future<List<Employee>> getAllEmployees() async {
    try {
      final response = await http.get(
        Uri.parse(baseUrl),
        headers: await _getHeaders(),
      );

      print('Response status: ${response.statusCode}');
      print('Response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['success'] == true) {
          final List<dynamic> employeeList = data['data'];
          return employeeList.map((json) => Employee.fromJson(json)).toList();
        }
      }
      throw Exception('Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n');
    } catch (e) {
      print('Error in getAllEmployees: $e');
      throw Exception('L·ªói k·∫øt n·ªëi: $e');
    }
  }

  // ============================================================
  // üîπ GET ONE EMPLOYEE BY ID
  Future<Employee> getEmployeeById(String id) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/$id'),
        headers: await _getHeaders(),
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['success'] == true) {
          return Employee.fromJson(data['data']);
        }
      }
      throw Exception('Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n');
    } catch (e) {
      throw Exception('L·ªói k·∫øt n·ªëi: $e');
    }
  }

  // ============================================================
  // üîπ CREATE EMPLOYEE
  Future<Employee> createEmployee(Employee employee) async {
    try {
      final response = await http.post(
        Uri.parse(baseUrl),
        headers: await _getHeaders(),
        body: json.encode(employee.toJson()),
      );

      print('Create response status: ${response.statusCode}');
      print('Create response body: ${response.body}');

      if (response.statusCode == 201 || response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['success'] == true) {
          return Employee.fromJson(data['data']);
        }
      }

      final error = json.decode(response.body);
      throw Exception(error['message'] ?? 'Kh√¥ng th·ªÉ th√™m nh√¢n vi√™n');
    } catch (e) {
      print('Error in createEmployee: $e');
      throw Exception('L·ªói: $e');
    }
  }

  // ============================================================
  // üîπ UPDATE EMPLOYEE
  Future<Employee> updateEmployee(String id, Employee employee) async {
    try {
      final response = await http.put(
        Uri.parse('$baseUrl/$id'),
        headers: await _getHeaders(),
        body: json.encode(employee.toJson()),
      );

      print('Update response status: ${response.statusCode}');
      print('Update response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['success'] == true) {
          return Employee.fromJson(data['data']);
        }
      }

      final error = json.decode(response.body);
      throw Exception(error['message'] ?? 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t nh√¢n vi√™n');
    } catch (e) {
      print('Error in updateEmployee: $e');
      throw Exception('L·ªói: $e');
    }
  }

  // ============================================================
  // üîπ DELETE EMPLOYEE
  Future<bool> deleteEmployee(String id) async {
    try {
      final response = await http.delete(
        Uri.parse('$baseUrl/$id'),
        headers: await _getHeaders(),
      );

      print('Delete response status: ${response.statusCode}');
      print('Delete response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return data['success'] == true;
      }
      throw Exception('Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n');
    } catch (e) {
      print('Error in deleteEmployee: $e');
      throw Exception('L·ªói: $e');
    }
  }

  // ============================================================
  // üîπ L·∫§Y DANH S√ÅCH CH·ª®C V·ª§
  Future<List<ChucVu>> getChucVu() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/danh-muc/chuc-vu'),
        headers: await _getHeaders(),
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['success'] == true) {
          final List<dynamic> list = data['data'];
          return list.map((json) => ChucVu.fromJson(json)).toList();
        }
      }
      throw Exception('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ch·ª©c v·ª•');
    } catch (e) {
      throw Exception('L·ªói: $e');
    }
  }

  // ============================================================
  // üîπ L·∫§Y DANH S√ÅCH PH√íNG BAN
  Future<List<PhongBan>> getPhongBan() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/danh-muc/phong-ban'),
        headers: await _getHeaders(),
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['success'] == true) {
          final List<dynamic> list = data['data'];
          return list.map((json) => PhongBan.fromJson(json)).toList();
        }
      }
      throw Exception('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng ban');
    } catch (e) {
      throw Exception('L·ªói: $e');
    }
  }

  // ============================================================
  // üîπ G·ª¨I OTP X√ÅC NH·∫¨N X√ìA NH√ÇN VI√äN
  Future<bool> sendDeleteOtp(String id) async {
    try {
      final otpUrl = '${dotenv.env['BASE_URL']}/otp/send-delete/1';
      final token = await _getToken();

      print('üß© Token ƒë·ªçc t·ª´ SharedPreferences: $token');

      if (token == null || token.isEmpty) {
        throw Exception('‚ö†Ô∏è Ch∆∞a c√≥ token ƒëƒÉng nh·∫≠p');
      }

      final response = await http.post(
        Uri.parse(otpUrl),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );

      print('üì° Request URL: $otpUrl');
      print('üì© Response status: ${response.statusCode}');
      print('üìÑ Response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return data['ok'] == true;
      }
      return false;
    } catch (e) {
      print('‚ùå L·ªói g·ª≠i OTP: $e');
      throw Exception('L·ªói g·ª≠i OTP: $e');
    }
  }

  // ============================================================
  // üîπ X√ÅC MINH M√É OTP (ƒë√£ s·ª≠a ƒë√∫ng key g·ª≠i "code")
  Future<bool> verifyDeleteOtp(String id, String otp) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('token');
      print('üîπ Token hi·ªán t·∫°i: $token');

      if (token == null || token.isEmpty) {
        throw Exception('‚ö†Ô∏è Ch∆∞a c√≥ token ƒëƒÉng nh·∫≠p');
      }

      final verifyUrl = '${dotenv.env['BASE_URL']}/otp/verify-delete/1';
      final response = await http.post(
        Uri.parse(verifyUrl),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: json.encode({'code': otp}),
      );

      print('Verify OTP status: ${response.statusCode}');
      print('Verify OTP body: ${response.body}');
      return response.statusCode == 200;
    } catch (e) {
      print('Error in verifyDeleteOtp: $e');
      return false;
    }
  }
}
